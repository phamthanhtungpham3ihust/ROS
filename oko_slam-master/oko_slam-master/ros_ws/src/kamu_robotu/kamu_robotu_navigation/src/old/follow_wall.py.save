#! /usr/bin/env python
# We are looking for the wall. If we find wall, we turn left to keep wall always
# right side of the robot

import rospy
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from tf import transformations
from std_srvs.srv import *

import math

## Global variables
active_ = True
pub_ = None #Since we are using publisher in the functions as well we need to 
# make it global

linear_velocity_ = 0.06
angular_velocity_ = 0.4

regions_ = {
        'east': 0,
        'north': 0,
        'west': 0,
        'south': 0,
	'north-west': 0,
	'north-east': 0,
}

state_ = 0 #Start from find the wall state
state_dict_ = {
    0: 'find the wall',
    1: 'turn left',
    2: 'follow the wall',
    3: 'turn right',
}

def wall_follower_switch(req):
    global active_
    active_ = req.data
    res = SetBoolResponse()
    res.success = True
    res.message = 'Done!'
    return res


def callback_laser(msg):
    global regions_
    # Our laser publishes 64 point per rotation
    # Let's divide these 64 point to total_region_number different region
    # LIDAR rotates counter-clockwise
    # Let's start from the absolute right direction region and rotate cclockwise    
    # By taking mean value in reach region, we want to find out which region
    # has the closest object/wall 
    # To eliminate Inf measurement, we used min function  
    MAX_LIDAR_RANGE = 3 #in meter
    total_region_number = 4 #East, North, West, South
    # Which regions corresponds to which side will be found later.
    regions_ = { 
      'north': min(min(msg.ranges[14:18]), MAX_LIDAR_RANGE), 
      'west': min(min(msg.ranges[30:34]), MAX_LIDAR_RANGE), 
      'south': min(min(msg.ranges[46:50]), MAX_LIDAR_RANGE), 
      'east': min(min( min(msg.ranges[62:63]) ,min(msg.ranges[0:2]) ), MAX_LIDAR_RANGE),
      'north-west': min(min(msg.ranges[38:42]), MAX_LIDAR_RANGE),     
      'north-east': min(min(msg.ranges[22:26]), MAX_LIDAR_RANGE)
}
    
    take_action()

def change_state(state):
    global state_, state_dict_
    if state is not state_:
        print 'Wall follower - [%s] - %s' % (state, state_dict_[state])
        state_ = state

def take_action():
    global regions_, linear_velocity_, angular_velocity_
    regions = regions_
    msg = Twist()
    linear_x = 0
    angular_z = 0
    state_description = ''
    
    max_dist2robot = 0.30 #If detected object is far away from this value, we 
    # don't consider it
    max_dist2robot2obj = 0.20
    
    # If there exists an object only north then turn left --> Case 2
    # Positive turn around z axis corresponds to turning left
    if regions['north'] > max_dist2robot and regions['west'] > max_dist2robot and regions['east'] > max_dist2robot:
	  'north-west': min(min(msg.ranges[22:26]), MAX_LIDAR_RANGE),
	  'north-east': min(min(msg.ranges[6:10]), MAX_LIDAR_RANGE)        state_description = 'case 1 - nothing'
        change_state(0)
    elif regions['north'] < max_dist2robot and regions['west'] > max_dist2robot and regions['east'] > max_dist2robot:
        state_description = 'case 2 - north'
        change_state(1)
    elif regions['north'] > max_dist2robot and regions['west'] > max_dist2robot and regions['east'] < max_dist2robot:
        state_description = 'case 3 - east'
        change_state(2)
    elif regions['north'] > max_dist2robot and regions['west'] < max_dist2robot and regions['east'] > max_dist2robot:
        state_description = 'case 4 - west'
        change_state(2)
    elif regions['north'] < max_dist2robot and regions['west'] > max_dist2robot and regions['east'] < max_dist2robot:
        state_description = 'case 5 - north and east'
        change_state(1)
    elif regions['north'] < max_dist2robot and regions['west'] < max_dist2robot and regions['east'] > max_dist2robot:
        state_description = 'case 6 - north and west'
        change_state(3)
    elif regions['north'] < max_dist2robot and regions['west'] < max_dist2robot and regions['east'] < max_dist2robot:
        state_description = 'case 7 - north and west and east'
        change_state(3)
    elif regions['north'] > max_dist2robot and regions['west'] < max_dist2robot and regions['east'] < max_dist2robot:
        state_description = 'case 8 - west and east'
        change_state(0)
    elif regions['north-west'] < max_dist2robot2obj and regions['west'] > max_dist2robot and regions['east'] > max_dist2robot and regions['north'] > max_dist2robot:
        state_description = 'case 9 - west and east'
        change_state(3)
    elif regions['north-east'] < max_dist2robot2obj and regions['west'] > max_dist2robot and regions['east'] > max_dist2robot and regions['north'] > max_dist2robot:
        state_description = 'case 10 - west and east'
        change_state(1)
    else:
        state_description = 'Unknown Case GG WP!'
        rospy.loginfo(regions)
        
    rospy.loginfo(state_description)
    rospy.loginfo(regions)
      

def find_wall():
    msg = Twist()
    msg.linear.x = linear_velocity_
    #msg.angular.z = angular_velocity_
    return msg

def turn_left():
    msg = Twist()
    msg.angular.z = angular_velocity_
    return msg

def turn_right():
    msg = Twist()
    msg.angular.z = -angular_velocity_
    return msg

def follow_the_wall():
    global regions_
    
    msg = Twist()
    msg.linear.x = linear_velocity_
    return msg

def main():
    global pub_, active_
    
    rospy.init_node('follow_wall')
    
    pub_ = rospy.Publisher('/cmd_vel', Twist, queue_size=1)
    
    sub = rospy.Subscriber('/scan', LaserScan, callback_laser)
    
    srv = rospy.Service('wall_follower_switch', SetBool, wall_follower_switch)
    
    rate = rospy.Rate(20)
    while not rospy.is_shutdown():
        if not active_:
            rate.sleep()
            continue
        
        msg = Twist()
        if state_ == 0:
            msg = find_wall()
            print "Find wall Bitch!"
        elif state_ == 1:
            msg = turn_left()
            print "Turn Left Bitch!"
	elif state_ == 3:
            msg = turn_right()
            print "Turn Right Bitch!"
        elif state_ == 2:
            msg = follow_the_wall()
            print "Follow the Wall Bitch!"
            pass
        else:
            rospy.logerr('Unknown state! GG WP :(')
        
        pub_.publish(msg)
        
        rate.sleep()

if __name__ == '__main__':
    main()
    
